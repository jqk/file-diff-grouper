# 快速扫描时读取各个文件头用于计算摘要的字节长度。
headerSize: 1024
# 文件读取缓冲区字节长度，必须大于等于 HeaderSize。
bufferSize: 10240

# 待执行的操作，字符串，大小写不敏感，只能是以下三类之一：
# Compare：比较 compareBase 和 compareTarget。
# ScanBase：仅扫描 compareBase。
# ScanTarget：仅扫描 compareTarget。
action: "Compare"

# 待比较的基准路径信息。
compareBase:
  # 待比较的文件所在路径。可以是只读的。
  dir: "test-data/origin/compare_base_0"
  # 保存扫描结果的文件名，必须是可写的。
  # 可以指定相对或绝对路径文件名。也可以通过 ${dir} 引用 dir 定义的路径。
  scanResultFile: "${dir}/~~~data/base-scan.data.json"
  # 是否直接装载以前的扫描结果的文件，以提高速度，避免每次重复扫描。
  # 在上一次扫描到本次扫描之间，待比较路径中的文件可能有增、删等变化。
  # 这要由用户自行决定是否装载以前的扫描结果以提高效率。程序不会自动关注可能存在的变化。
  # 如果为 true，但文件不存在，则会进行扫描。
  loadScanResult: true
  # 是否对待比较的文件进行整个文件摘要的计算。为 false 计算文件头的摘要值。 
  # 一般而言，指定为 true 是为了下次装载扫描结果。
  needFullChecksum: true

# 待比较的目标路径信息。
compareTarget:
  # 比较目标路径，如果不做 move 操作，可以是只读的。否则，必须是可写的。
  dir: "test-data/origin/compare_target"
  # 保存扫描结果的文件名，必须是可写的。
  # 可以指定相对或绝对路径文件名。也可以通过 ${dir} 引用 dir 定义的路径。
  scanResultFile: "${dir}/~~~data/target-scan.data.json"
  # 是否直接装载以前的扫描结果的文件，以提高速度，避免每次重复扫描。
  # 在上一次扫描到本次扫描之间，待比较路径中的文件可能有增、删等变化。
  # 这要由用户自行决定是否装载以前的扫描结果以提高效率。程序不会自动关注可能存在的变化。
  # 如果为 true，但文件不存在，则会进行扫描。
  loadScanResult: true
  # 是否对待比较的文件进行整个文件摘要的计算。为 false 计算文件头的摘要值。 
  # 一般而言，指定为 true 是为了下次装载扫描结果。
  needFullChecksum: true

  # 保存比较结果的路径，必须是可写的。而且，必需是无需复制，能直接从 dir 移动文件的路径。
  # 可以指定相对或绝对路径。也可以通过 ${dir} 引用 dir 定义的路径。
  backupDir: "${dir}/~~~result"
  # 是否将 target 比 base 多的文件移动到比较结果目录中。为 false 只生成结果文件列表。
  moveMore: false
  # 是否将 target 和 base 相同的文件移动到比较结果目录中。为 false 只生成结果文件列表。
  moveSame: false

# 选择待比较文件的过滤条件。
filter:
  # 过滤时扩展名是否大小写敏感。    
  caseSensitive: true
  # 包含的文件扩展名。必须提供至少一个有效的、不为空字符串的条件。
  include:
    - "*.txt"
    - "*.md"

  # 排除的文件扩展名，可以不提供。
  exclude:
    - "*.logg"

  # 文件字节最小长度小于等于 0 表示不限制，但至少会从 1 字节开始，0 字节不处理。
  minFileSize: 1024

  # 文件字节最大长度小于等于 0 表示不限制。
  maxFileSize: 1048576
