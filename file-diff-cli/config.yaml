# The number of bytes read from each file header for calculating checksum during quick scan.
headerSize: 1024
# The buffer size in bytes for reading files. It must be greater than or equal to HeaderSize.
bufferSize: 10240

# Action to perform, case insensitive, must be one of:
# - Compare: Compare compareBase and compareTarget.
# - ScanBase: Only scan compareBase.
# - ScanTarget: Only scan compareTarget.
action: "Compare"

# Base path information for comparison.
compareBase:
  # Compare base path. Can be read-only.
  dir: "z:/compare_base"
  # Filename to save the scan result.
  # Can be a relative or absolute path. Can also reference the path defined above using ${dir}.
  # It equals to 'z:/compare_base/base.scan.json' below.
  scanResultFile: "${dir}/base.scan.json"
  # Whether to load previous scan result file to improve speed, avoiding rescanning every time.
  # Files in the compare paths may have changed (added, deleted etc) since last scan.
  # It's up to the user to decide whether to load previous result to improve efficiency.
  # The program does not automatically handle potential changes.
  # If set to true but the file does not exist, scanning will be performed.
  loadScanResult: true
  # Whether to compute full file digests for the files being compared.
  # False means computing digest of file header only.
  needFullChecksum: false
  # When the file headers are the same and the file lengths are also same, whether to continue comparing the entire file contents.
  # If the file header length is large, such as 10KB, in general, meeting the preceding conditions can determine that the file contents are the same. 
  # It cannot be guaranteed to be the same, but it can greatly improve the comparison speed.
  compareFullChecksum: false

# 待比较的目标路径信息。
compareTarget:
  # Compare target path. Can be read-only if not doing moveMore and moveSame operations below.
  # Otherwise must be writable.
  dir: "z:/compare_target"
  # Same as attributes defined in compareBase.
  scanResultFile: "z:/result/target.scan.json"
  loadScanResult: true
  needFullChecksum: false

  # When the file headers are the same and the file lengths are also same, whether to continue comparing the entire file contents.
  # If the file header length is large, such as 10KB, in general, meeting the preceding conditions can determine that the file contents are the same. 
  # It cannot be guaranteed to be the same, but it can greatly improve the comparison speed.
  compareFullChecksum: false

  # Path to save the comparison results, must be writable.
  # Can be a relative or absolute path. Can also reference the path defined in above using ${dir}.
  backupDir: "z:/result/group"
  # Whether to move files in target but not in base to the compare result dir.
  # False means only generating a result file list.
  moveMore: false
  # Whether to move files that exist in both target and base to the compare result directory.
  # False means only generating a result file list.
  moveSame: false

# Filter criteria for selecting files to compare.
filter:
  # Whether to be case sensitive for file extensions.
  caseSensitive: false
  # File extensions to include. Must provide condition(s) with at least one valid string.
  # Empty string means files without extension.
  # The include in this example covers major image and video extensions for phones and cameras.
  include:
    - "*.3gp"
    - "*.amr"
    - "*.avi"
    - "*.bmp"
    - "*.gif"
    - "*.jpeg"
    - "*.jpg"
    - "*.mov"
    - "*.mp4"
    - "*.mpg"
    - "*.png"
    - "*.webp"
    - "*.wmv"

  # File extensions to exclude, can be left empty.
  exclude:
    - "*.log"

  # Minimum file size in bytes, 0 or less means no limit,
  # It's better to process starting from 1 byte, 0 byte files are non sense.
  minFileSize: 1024

  # Maximum file size in bytes, 0 or less means no limit.
  maxFileSize: 0
